service: orders-service

frameworkVersion: ">=2.53.1"
configValidationMode: error
variablesResolutionMode: 20210326
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  timeout: 30
  memorySize: 512
  logRetentionInDays: 14
  versionFunctions: false
  stackName: ${self:custom.arguments.prefix}-${self:service}-${self:custom.arguments.region}
  stage: ${self:custom.arguments.stage}
  region: ${self:custom.arguments.region}
  environment:
    LOG_LEVEL: debug

custom:
  arguments: ${file( .local-arguments.yml )}
  base_prefix: ${self:custom.arguments.prefix}-${self:custom.arguments.stage}
  base_arn:
    dynamodb: arn:aws:dynamodb:${aws:region}:${aws:accountId}
    lambda: arn:aws:lambda:${aws:region}:${aws:accountId}
  dynamodb:
    orders:
      table_name: ${self:custom.base_prefix}-orders
      arn: ${self:custom.base_arn.dynamodb}:table/${self:custom.dynamodb.orders.table_name}
  cognito:
    userpool:
      name: ${self:custom.base_prefix}-user-pool
    client:
      name: ${self:custom.base_prefix}-user-pool-client
  lambda:
    create_order:
      name: ${self:custom.base_prefix}-create-order
      role_name: ${self:custom.base_prefix}-create-order-role
      arn: ${self:custom.base_arn.lambda}:function:${self:custom.lambda.create_order.name}
    get_order:
      name: ${self:custom.base_prefix}-get-order
      role_name: ${self:custom.base_prefix}-get-order-role
      arn: ${self:custom.base_arn.lambda}:function:${self:custom.lambda.get_order.name}
  appSync:
    name: orders-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: {Ref: UserPool}
    mappingTemplates:
      - dataSource: createOrder
        type: Mutation
        field: createOrder
        request: false
        response: false
      - dataSource: getOrder
        type: Query
        field: getOrder
        request: false
        response: false
    dataSources:
      - type: AWS_LAMBDA
        name: createOrder
        config:
          functionName: CreateOrder
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
              Resource:
                - ${self:custom.lambda.create_order.arn}
                - ${self:custom.lambda.create_order.arn}:*
      - type: AWS_LAMBDA
        name: getOrder
        config:
          functionName: GetOrder
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
              Resource:
                - ${self:custom.lambda.get_order.arn}
                - ${self:custom.lambda.get_order.arn}:*
  pythonRequirements:
    useStaticCache: true
    useDownloadCache: true
    cacheLocation: .env/requirements_cache
    pythonBin: /usr/bin/python3
    dockerizePip: non-linux
    layer:
      name: python-requirements
      description: Python requirements lambda layer
      compatibleRuntimes:
        - python3.8
      licenseInfo: GPLv3
      allowedAccounts:
        - "*"

package:
  individually: true
  patterns:
    - "!**/*"
    - src/controller/order.py
    - src/controller/repository.py
    - src/model/order.py
    - src/service/dynamodb.py
    - src/helper/boto.py
    - src/helper/exception.py
    - src/helper/model.py
    - src/helper/tools.py

functions:
  CreateOrder:
    name: ${self:custom.lambda.create_order.name}
    handler: src/handler/create_order.handler
    environment:
      ORDERS_TABLE: ${self:custom.dynamodb.orders.table_name}
    iamRoleStatementsName: ${self:custom.lambda.create_order.role_name}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: ${self:custom.dynamodb.orders.arn}
    package:
      patterns:
        - src/handler/create_order.py
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  GetOrder:
    name: ${self:custom.lambda.get_order.name}
    handler: src/handler/get_order.handler
    environment:
      ORDERS_TABLE: ${self:custom.dynamodb.orders.table_name}
    iamRoleStatementsName: ${self:custom.lambda.get_order.role_name}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.dynamodb.orders.arn}
    package:
      patterns:
        - src/handler/get_order.py
    layers:
      - {Ref: PythonRequirementsLambdaLayer}

resources:
  - ${file( resources/infrastructure/cognito.yml )}
  - ${file( resources/infrastructure/dynamodb.yml )}
